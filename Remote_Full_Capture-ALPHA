###############################################################################################
#  Script Name:  Remote_Full_Capture
#  Programmer:   RRB
#  Purpose:      Pull memory capture from a remote windows machine on the internal network.
#  Prerequisite: Run script as account that is admin on remote machine;
#  Run from C:\sta\Full_Capture folder; Winpmem.exe and 7za.exe must be in this folder;
###############################################################################################
using namespace System.Management.Automation.Host
$ProgressPreference = "SilentlyContinue"
# Set-PSDebug -Trace 1

###############################################################################################
#  Menu Options               
#  0. Fast Memory Capture
#  1. High Integrity Memory Capture
#  2. Kape Capture Only
#  3. Full - Order of Volatility

# Create Timestamp and remote powershell session.
$script:MemoryCaptureStartDate = (Get-Date -Format FileDateTimeUniversal)

#region Functions
function Get-ComputerNameFunction {
    # Ask for name of the computer to have its memory captured.
    $script:input_computer = Read-Host -Prompt "Enter computer to capture memory from"
    write-host -ForegroundColor Magenta -BackgroundColor Yellow "Memory will be captured from" $script:input_computer
}

function Show-MenuFunction {
    [CmdletBinding()]  
    $speed = [ChoiceDescription]::new('&speed', 'Fast Memory Capture')
    $integrity = [ChoiceDescription]::new('&integrity', 'High Integrity Memory Capture')
    $kape = [ChoiceDescription]::new('&kape', 'Kape Capture Only')
    $auto = [ChoiceDescription]::new('&auto', 'FUll - Order of Volatility')
    # $auto_ransom = [ChoiceDescription]::new('&auto ransom', 'Automatic for Ransomware Incident')
    # $auto_deep = [ChoiceDescription]::new('&auto deep', 'Automatic for Deep Dive Forensic Capture')
    $options = [ChoiceDescription[]]($speed, $integrity, $kape, $auto) # , $auto, $auto_ransom, $auto_deep)
    $result = $host.ui.PromptForChoice('Capture Options', 'Chose one of the options below', $options, 0)

    switch ($result) {
        0 { 'You have chosen Fast Memory Capture'; Invoke-MemoryCaptureFastFunction }
        1 { 'You have chosen High Integrity Memory Capture'; Invoke-MemoryCaptureHighIntegrityFunction }
        2 { 'You have chosen Kape Capture Only'; Invoke-KapeCaptureOnlyFunction }
        3 { 'You have chosen Automatic' }
        # 5 { 'You have chosen Automatic Ransomware' }
        # 6 { 'You have chosen Automatic Deep Dive' }
    }

}

function Get-LocalHashesFunction {
    # Get hashes of EXE and PS1 files in C:\sta\Full_Capture
    write-host -ForegroundColor Magenta "- Get hashes of EXE and PS1 files in C:\sta\Full_Capture"
    Get-FileHash *.exe, *.ps1, *.zip | Format-Table -AutoSize
}

function Create-RemotePowerShellSessionFunction {
    # Create remote powershell session.
    write-host -ForegroundColor Magenta -BackgroundColor Yellow $script:MemoryCaptureStartDate "- Start Time"
    $script:RemoteSession = new-pssession -computername $script:input_computer
    $script:RemotePath = "C:\Program Files\TSCU-Files"
    $script:LocalPath1 = "C:\sta\Full_Capture"
}

function Copy-ToRemoteFunction {
    # Copy Files to Remote Machine.
    write-host -ForegroundColor Magenta "- Winpmem.exe and 7za.exe are being copied to" $script:input_computer
    write-debug "script:remotesession is now $script:remotesession"
    copy-item -ToSession $script:RemoteSession -path .\winpmem.exe -Destination $script:RemotePath
    copy-item -ToSession $script:RemoteSession -path .\7za.exe -Destination $script:RemotePath
}

function Get-FreeDiskSpaceFunction {
    $script:freeSpace = (Get-CimInstance Win32_LogicalDisk | Measure-Object -Property FreeSpace -Sum).sum /1gb
    $script:freeSpace = [math]::ceiling($freeSpace)
    $script:Memory = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum /1gb
    write-host -ForegroundColor Magenta $script:freeSpace"GB Free disk space on" $using:input_computer
    write-host -ForegroundColor Magenta $script:Memory"GB Memory on" $using:input_computer
    if ($script:freeSpace -gt $script:Memory + 2) 
    {
        write-host -ForegroundColor Magenta "- Enough disk space for capture"
        $script:PlentyOfSpace = 1
    } else {
        write-host -ForegroundColor Magenta "- Possibly not enough disk space for capture"
        $script:PlentyOfSpace = 0
    }
}

function Get-MemoryFunction {
    CD "$using:RemotePath"
    write-host -ForegroundColor Magenta "- Get hashes of winpmem.exe and 7za.exe after copy to" $using:input_computer
    Get-FileHash winpmem.exe, 7za.exe | Format-Table -AutoSize
    .\winpmem.exe .\$using:MemoryCaptureStartDate"-MEMORY-IMAGE-"$using:input_computer".raw"
    $MemoryCaptureDoneDate = (Get-Date -Format FileDateTimeUniversal)
    write-host -ForegroundColor Magenta -BackgroundColor Yellow "$MemoryCaptureDoneDate - Memory Capture Complete"
}

function Hash-RawFileBeforeCompressionFunction {
    write-host -ForegroundColor Magenta "- Creating hash of .\$using:MemoryCaptureStartDate-MEMORY-IMAGE-$using:input_computer.raw BEFORE compression"
    .\7za.exe h -scrcSHA256 .\"$using:MemoryCaptureStartDate"-MEMORY-IMAGE-"$using:input_computer".raw
}

function Compress-RawFileFunction {
    write-host -ForegroundColor Magenta "- Starting compression of .\$using:MemoryCaptureStartDate-MEMORY-IMAGE-$using:input_computer.raw"
    .\7za.exe a -mx1 -sdel .\"$using:MemoryCaptureStartDate"-MEMORY-IMAGE-"$using:input_computer".raw.zip .\"$using:MemoryCaptureStartDate"-MEMORY-IMAGE-"$using:input_computer".raw
    write-host -ForegroundColor Magenta "- Memory capture file compression operation complete"
}

function Delete-CopiedUtilitiesFunction {
    rm .\winpmem.exe
    rm .\7za.exe
    write-host -ForegroundColor Magenta "- Winpmem.exe and 7za.exe files deleted on remote machine."
}

function Copy-CompressedMemoryCaptureToRequestingWorkstationFunction {
    # Copy compressed memory capture to requesting workstation.
    write-host -ForegroundColor Magenta "- Compressed Memory Capture Being Sent to Requesting Workstation."
    try {
        copy-item -FromSession $script:RemoteSession -path $script:RemotePath"\"$script:MemoryCaptureStartDate"-MEMORY-IMAGE-"$script:input_computer".raw.zip" -ErrorAction stop
    }
    catch {
    Write-Warning $_.Exception
    Stop-Transcript
    }
}

function Copy-RawMemoryCaptureToRequestingWorkstationFunction {
    # Copy compressed memory capture to requesting workstation.
    write-host -ForegroundColor Magenta "- Raw Memory Capture Being Sent to Requesting Workstation."
    try {
        copy-item -FromSession $script:RemoteSession -path $script:RemotePath"\"$script:MemoryCaptureStartDate"-MEMORY-IMAGE-"$script:input_computer".raw" -ErrorAction stop
    }
    catch {
    Write-Warning $_.Exception
    Stop-Transcript
    }
}

function Delete-RemoteZippedMemoryCaptureFunction {
    # Delete-RemoteZippedMemoryCaptureFunction
    write-host -ForegroundColor Magenta "- Delete Zipped Memory Capture from Remote Workstation."
    CD "$using:RemotePath";
    Remove-Item .\"$using:MemoryCaptureStartDate"-MEMORY-IMAGE-"$using:input_computer".raw.zip
}

function Hash-RawFileAfterCopyFunction {
    # Hash expanded memory file to compare to BEFORE hash.
    write-host -ForegroundColor Magenta "- Creating hash of .raw file AFTER copy to requesting workstation"
    cmd /c.\7za.exe h -scrcSHA256 .\$MemoryCaptureStartDate"-MEMORY-IMAGE-"$input_computer".raw"
}

function File-EvidenceFunction {
    # Create directory to store incoming Memory image on local workstation.
    New-Item -Path $LocalPath1 -Name "$MemoryCaptureStartDate-MEMORY-IMAGE-$input_computer" -ItemType "directory"
    $LocalPath2 =  "$LocalPath1\$MemoryCaptureStartDate-MEMORY-IMAGE-$input_computer"
    Copy-item -Path .\$MemoryCaptureStartDate"-MEMORY-IMAGE-"$input_computer".raw.zip" -Destination $LocalPath2
    Copy-item -Path .\$MemoryCaptureStartDate"-MEMORY-LOG_FILE-"$input_computer".log" -Destination $LocalPath2
    Stop-Transcript
    Remove-item -Path .\$MemoryCaptureStartDate"-MEMORY-IMAGE-"$input_computer".raw.zip"
    Remove-item -Path .\$MemoryCaptureStartDate"-MEMORY-LOG_FILE-"$input_computer".log"
}
#endregion

#region Run Selected Functions
function Invoke-MemoryCaptureFastFunction {
    Create-RemotePowerShellSessionFunction
    Copy-ToRemoteFunction
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-FreeDiskSpaceFunction}
    if ($script:PlentyOfSpace = 1) {
        Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-MemoryFunction}
        Copy-RawMemoryCaptureToRequestingWorkstationFunction
        Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Delete-CopiedUtilitiesFunction} 
        Hash-RawFileAfterCopyFunction
        File-EvidenceFunction # must accomidate raw file
    }
    else {
        write-host -ForegroundColor Magenta -BackgroundColor Yellow "$script:freeSpace FREE SPACE - Possibly not enough for capture"
        $confirmation = Read-Host "There may not be enough disk space on the remote machine.  Want to try anyway?:"
        if ($confirmation -eq 'y') {
            # proceed
            write-host -ForegroundColor Magenta -BackgroundColor Yellow "Challenge accepted. Good luck!"
        }
        else {
            # terminate script
            write-host -ForegroundColor Magenta -BackgroundColor Yellow "You have chosen to terminate this script. Safe play."
            Start-Sleep -Seconds 3
            exit
            Stop-Transcript
        }
    }      
}

function Invoke-MemoryCaptureHighIntegrityFunction {
    Get-LocalHashesFunction
    Create-RemotePowerShellSessionFunction
    Copy-ToRemoteFunction
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-FreeDiskSpaceFunction} 
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-MemoryFunction}
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Hash-RawFileBeforeCompressionFunction} 
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Compress-RawFileFunction} 
    $MemoryCaptureCompressedDate = (Get-Date -Format FileDateTimeUniversal)
    write-host -ForegroundColor Magenta -BackgroundColor Yellow "$MemoryCaptureCompressedDate - Memory Capture Complete and File Compressed"
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Delete-CopiedUtilitiesFunction} 
    Copy-CompressedMemoryCaptureToRequestingWorkstation
    $MemoryCaptureSendCompleteDate = (Get-Date -Format FileDateTimeUniversal)
    write-host -ForegroundColor Magenta -BackgroundColor Yellow "$MemoryCaptureSendCompleteDate - Compressed Memory Capture Send Complete"
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Delete-RemoteZippedMemoryCaptureFunction}

function Invoke-KapeCaptureOnlyFunction {
    Get-LocalHashesFunction
    Create-RemotePowerShellSessionFunction
    Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-FreeDiskSpaceFunction}    
}

    ####################################################################################
    # Perform operations on local computer
    ####################################################################################
    # Hash expanded raw file after copy to local workstation
    Hash-RawFileAfterCopyFunction

    write-host -ForegroundColor Magenta -BackgroundColor Yellow "Compare BEFORE hash with AFTER hash to make sure file is intact."

    # Move files to evidence folder
    File-EvidenceFunction

}

#endregion

#region Main Logic
####################################################################################
#  Main Logic
####################################################################################

####################################################################################
# Perform operations on local computer
####################################################################################
Get-ComputerNameFunction
Start-Transcript -path .\$script:MemoryCaptureStartDate"-MEMORY-LOG_FILE-"$script:input_computer".log"
Get-LocalHashesFunction
Show-MenuFunction  # go to selected option.

Create-RemotePowerShellSessionFunction
Copy-ToRemoteFunction

<####################################################################################
# Perform operations on remote remote computer
####################################################################################
# Get-FreeDiskSpace from remote computer
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-FreeDiskSpaceFunction} 

# Get-Memory from Remote Machine.
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Get-MemoryFunction}

# Hash-RawFileBeforeCompression
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Hash-RawFileBeforeCompressionFunction} 

# Compress-RawFile 
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Compress-RawFileFunction} 

$MemoryCaptureCompressedDate = (Get-Date -Format FileDateTimeUniversal)
write-host -ForegroundColor Magenta -BackgroundColor Yellow "$MemoryCaptureCompressedDate - Memory Capture Complete and File Compressed"

# Delete-CopiedUtilities
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Delete-CopiedUtilitiesFunction} 

# Copy-CompressedMemoryCaptureToRequestingWorkstation
Copy-CompressedMemoryCaptureToRequestingWorkstation

$MemoryCaptureSendCompleteDate = (Get-Date -Format FileDateTimeUniversal)
write-host -ForegroundColor Magenta -BackgroundColor Yellow "$MemoryCaptureSendCompleteDate - Compressed Memory Capture Send Complete"

# Delete .zip file from remote workstation.
Invoke-Command -verbose -session $script:RemoteSession  -Scriptblock ${function:Delete-RemoteZippedMemoryCaptureFunction}#>

####################################################################################
# Perform operations on local computer
####################################################################################
# Hash expanded raw file after copy to local workstation
Hash-RawFileAfterCopyFunction

write-host -ForegroundColor Magenta -BackgroundColor Yellow "Compare BEFORE hash with AFTER hash to make sure file is intact."

# Move files to evidence folder
File-EvidenceFunction

####################################################################################
#  End Main Line Logic
####################################################################################
#endregion

